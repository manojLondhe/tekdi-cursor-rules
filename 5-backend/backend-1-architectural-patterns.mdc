---
description: USE WHEN designing system architecture, implementing design patterns, organizing code structure, or discussing architectural decisions
globs: ["**/*"]
alwaysApply: false
---

# Architectural Patterns

## Layered Architecture

### Controller Layer
- Keep controllers thin and focused on HTTP concerns
- Handle request/response transformation
- Delegate business logic to service layer
- Implement proper input validation
- Return consistent response formats

### Service Layer
- Contain all business logic and rules
- Orchestrate operations across multiple repositories
- Handle business rule validation
- Implement transaction management
- Make services testable and mockable

### Repository/Data Access Layer
- Abstract data access logic
- Implement data persistence operations
- Handle database-specific concerns
- Provide clean interfaces for data operations
- Implement proper error handling for data operations

## Dependency Injection
- Use constructor injection for required dependencies
- Implement proper dependency interfaces/contracts
- Avoid circular dependencies
- Use dependency injection containers when available
- Make dependencies explicit and testable

## Domain-Driven Design Patterns

### Entities and Value Objects
- Define clear entity boundaries
- Use value objects for immutable data
- Implement proper equality comparison
- Encapsulate business rules within entities
- Maintain data consistency within aggregates

### Repository Pattern
- Define repository interfaces in domain layer
- Implement repositories in infrastructure layer
- Use repositories to abstract data access
- Implement unit of work pattern for transactions
- Keep repositories focused on single aggregates

## Error Handling Patterns

### Exception Hierarchy
- Create domain-specific exception types
- Use base exception classes for common behavior
- Include relevant context in exceptions
- Implement proper exception handling at boundaries
- Log exceptions with appropriate detail levels

### Result Pattern
- Use result objects for operations that can fail
- Return success/failure status with data or errors
- Avoid throwing exceptions for expected failures
- Implement proper error propagation
- Provide clear error messages to consumers

## Authentication and Authorization Patterns

### Authentication
- Implement token-based authentication
- Use secure token storage and transmission
- Implement proper token validation
- Handle token refresh and expiration
- Log authentication events for security monitoring

### Authorization
- Implement role-based access control
- Use attribute-based authorization for complex scenarios
- Implement proper permission checking
- Cache authorization decisions when appropriate
- Log authorization failures with relevant context

## Data Transfer Patterns

### DTO (Data Transfer Object)
- Use separate models for API requests/responses
- Implement proper validation in DTOs
- Keep DTOs focused on data transfer
- Version DTOs for API evolution
- Use mapping between DTOs and domain models

### Command and Query Separation
- Separate read and write operations
- Use commands for state-changing operations
- Use queries for data retrieval
- Implement different models for reads and writes
- Optimize each operation type independently

## Caching Patterns

### Cache-Aside Pattern
- Load data into cache on cache miss
- Update cache when data changes
- Implement proper cache invalidation
- Handle cache failures gracefully
- Expose cache performance metrics for monitoring

### Write-Through/Write-Behind
- Update cache and database together
- Implement eventual consistency where appropriate
- Handle cache and database synchronization
- Implement proper error recovery
- Log data consistency issues for debugging

## Background Processing Patterns

### Message Queue Pattern
- Use queues for asynchronous processing
- Implement proper message handling
- Handle message failures and retries
- Implement dead letter queues
- Expose queue metrics for health monitoring

### Event-Driven Architecture
- Use events for loose coupling
- Implement proper event handling
- Handle event ordering when necessary
- Implement event sourcing where appropriate
- Log event processing results and failures

## 12-Factor App Principles

### Configuration Management (12-Factor III)
- Store configuration in environment variables
- Use different configs for different environments
- Never commit secrets to version control
- Implement config validation on application startup
- Group related config into logical sections
- Provide sensible defaults where appropriate

### Build, Release, Run (12-Factor V)
- Strictly separate build and run stages
- Build stage: transforms code into executable bundle
- Release stage: combines build with config for deployment
- Run stage: executes application in target environment
- Use immutable releases with unique identifiers
- Structure code to support automated build processes

### Process Architecture (12-Factor VI)
- Design stateless processes that share nothing
- Store session state in external stores (database, cache)
- Make processes disposable and easily replaceable
- Use process isolation for different concerns
- Implement proper process communication patterns

### Port Binding (12-Factor VII)
- Export services via port binding
- Make applications self-contained and portable
- Bind to specific ports for service communication
- Use environment variables for port configuration
- Implement proper service discovery mechanisms

### Disposability (12-Factor IX)
- Implement proper signal handling for shutdown
- Handle termination signals gracefully
- Minimize startup time through efficient initialization
- Ensure processes can be stopped and started quickly
- Handle unexpected termination gracefully
- Complete existing requests before shutdown

### Dev/Prod Parity (12-Factor X)
- Keep development, staging, and production as similar as possible
- Use same backing services across environments
- Structure code for frequent deployments
- Use same tools and dependencies across environments
- Maintain consistent data stores and service versions
- Structure code to support containerized deployments

### Admin Processes (12-Factor XII)
- Run admin/management tasks as one-off processes
- Use same environment and codebase for admin tasks
- Include admin code in application repository
- Use same dependency isolation for admin processes
- Implement admin tasks as separate commands/scripts
- Avoid direct database manipulation outside of application
